// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cache.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	cache.proto

It has these top-level messages:
	Cache
	CacheKeys
	CacheResponse
	CacheObj
	CacheValue
	Empty
	CacheList
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Cache struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Duration int64  `protobuf:"varint,2,opt,name=duration" json:"duration,omitempty"`
	Interval int64  `protobuf:"varint,3,opt,name=interval" json:"interval,omitempty"`
}

func (m *Cache) Reset()                    { *m = Cache{} }
func (m *Cache) String() string            { return proto1.CompactTextString(m) }
func (*Cache) ProtoMessage()               {}
func (*Cache) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Cache) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cache) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Cache) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

type CacheKeys struct {
	Keys []string `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
}

func (m *CacheKeys) Reset()                    { *m = CacheKeys{} }
func (m *CacheKeys) String() string            { return proto1.CompactTextString(m) }
func (*CacheKeys) ProtoMessage()               {}
func (*CacheKeys) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CacheKeys) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

type CacheResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *CacheResponse) Reset()                    { *m = CacheResponse{} }
func (m *CacheResponse) String() string            { return proto1.CompactTextString(m) }
func (*CacheResponse) ProtoMessage()               {}
func (*CacheResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CacheResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CacheResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type CacheObj struct {
	Cache    *Cache               `protobuf:"bytes,1,opt,name=cache" json:"cache,omitempty"`
	Key      string               `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value    *google_protobuf.Any `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	Duration int32                `protobuf:"varint,4,opt,name=duration" json:"duration,omitempty"`
}

func (m *CacheObj) Reset()                    { *m = CacheObj{} }
func (m *CacheObj) String() string            { return proto1.CompactTextString(m) }
func (*CacheObj) ProtoMessage()               {}
func (*CacheObj) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CacheObj) GetCache() *Cache {
	if m != nil {
		return m.Cache
	}
	return nil
}

func (m *CacheObj) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CacheObj) GetValue() *google_protobuf.Any {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *CacheObj) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type CacheValue struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *CacheValue) Reset()                    { *m = CacheValue{} }
func (m *CacheValue) String() string            { return proto1.CompactTextString(m) }
func (*CacheValue) ProtoMessage()               {}
func (*CacheValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CacheValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type CacheList struct {
	Caches []*Cache `protobuf:"bytes,1,rep,name=caches" json:"caches,omitempty"`
}

func (m *CacheList) Reset()                    { *m = CacheList{} }
func (m *CacheList) String() string            { return proto1.CompactTextString(m) }
func (*CacheList) ProtoMessage()               {}
func (*CacheList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CacheList) GetCaches() []*Cache {
	if m != nil {
		return m.Caches
	}
	return nil
}

func init() {
	proto1.RegisterType((*Cache)(nil), "proto.Cache")
	proto1.RegisterType((*CacheKeys)(nil), "proto.CacheKeys")
	proto1.RegisterType((*CacheResponse)(nil), "proto.CacheResponse")
	proto1.RegisterType((*CacheObj)(nil), "proto.CacheObj")
	proto1.RegisterType((*CacheValue)(nil), "proto.CacheValue")
	proto1.RegisterType((*Empty)(nil), "proto.Empty")
	proto1.RegisterType((*CacheList)(nil), "proto.CacheList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CacheService service

type CacheServiceClient interface {
	MakeCache(ctx context.Context, in *Cache, opts ...grpc.CallOption) (*CacheResponse, error)
	ListCache(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CacheList, error)
	DelCache(ctx context.Context, in *Cache, opts ...grpc.CallOption) (*CacheResponse, error)
	CacheAdd(ctx context.Context, in *CacheObj, opts ...grpc.CallOption) (*CacheResponse, error)
	CacheGet(ctx context.Context, in *CacheObj, opts ...grpc.CallOption) (*CacheValue, error)
	CacheSet(ctx context.Context, in *CacheObj, opts ...grpc.CallOption) (*CacheResponse, error)
	CacheUpdate(ctx context.Context, in *CacheObj, opts ...grpc.CallOption) (*CacheResponse, error)
	CacheDelete(ctx context.Context, in *CacheObj, opts ...grpc.CallOption) (*CacheResponse, error)
}

type cacheServiceClient struct {
	cc *grpc.ClientConn
}

func NewCacheServiceClient(cc *grpc.ClientConn) CacheServiceClient {
	return &cacheServiceClient{cc}
}

func (c *cacheServiceClient) MakeCache(ctx context.Context, in *Cache, opts ...grpc.CallOption) (*CacheResponse, error) {
	out := new(CacheResponse)
	err := grpc.Invoke(ctx, "/proto.CacheService/MakeCache", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) ListCache(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CacheList, error) {
	out := new(CacheList)
	err := grpc.Invoke(ctx, "/proto.CacheService/ListCache", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) DelCache(ctx context.Context, in *Cache, opts ...grpc.CallOption) (*CacheResponse, error) {
	out := new(CacheResponse)
	err := grpc.Invoke(ctx, "/proto.CacheService/DelCache", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) CacheAdd(ctx context.Context, in *CacheObj, opts ...grpc.CallOption) (*CacheResponse, error) {
	out := new(CacheResponse)
	err := grpc.Invoke(ctx, "/proto.CacheService/CacheAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) CacheGet(ctx context.Context, in *CacheObj, opts ...grpc.CallOption) (*CacheValue, error) {
	out := new(CacheValue)
	err := grpc.Invoke(ctx, "/proto.CacheService/CacheGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) CacheSet(ctx context.Context, in *CacheObj, opts ...grpc.CallOption) (*CacheResponse, error) {
	out := new(CacheResponse)
	err := grpc.Invoke(ctx, "/proto.CacheService/CacheSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) CacheUpdate(ctx context.Context, in *CacheObj, opts ...grpc.CallOption) (*CacheResponse, error) {
	out := new(CacheResponse)
	err := grpc.Invoke(ctx, "/proto.CacheService/CacheUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) CacheDelete(ctx context.Context, in *CacheObj, opts ...grpc.CallOption) (*CacheResponse, error) {
	out := new(CacheResponse)
	err := grpc.Invoke(ctx, "/proto.CacheService/CacheDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CacheService service

type CacheServiceServer interface {
	MakeCache(context.Context, *Cache) (*CacheResponse, error)
	ListCache(context.Context, *Empty) (*CacheList, error)
	DelCache(context.Context, *Cache) (*CacheResponse, error)
	CacheAdd(context.Context, *CacheObj) (*CacheResponse, error)
	CacheGet(context.Context, *CacheObj) (*CacheValue, error)
	CacheSet(context.Context, *CacheObj) (*CacheResponse, error)
	CacheUpdate(context.Context, *CacheObj) (*CacheResponse, error)
	CacheDelete(context.Context, *CacheObj) (*CacheResponse, error)
}

func RegisterCacheServiceServer(s *grpc.Server, srv CacheServiceServer) {
	s.RegisterService(&_CacheService_serviceDesc, srv)
}

func _CacheService_MakeCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cache)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).MakeCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CacheService/MakeCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).MakeCache(ctx, req.(*Cache))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_ListCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).ListCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CacheService/ListCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).ListCache(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_DelCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cache)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).DelCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CacheService/DelCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).DelCache(ctx, req.(*Cache))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_CacheAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheObj)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).CacheAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CacheService/CacheAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).CacheAdd(ctx, req.(*CacheObj))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_CacheGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheObj)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).CacheGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CacheService/CacheGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).CacheGet(ctx, req.(*CacheObj))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_CacheSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheObj)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).CacheSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CacheService/CacheSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).CacheSet(ctx, req.(*CacheObj))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_CacheUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheObj)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).CacheUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CacheService/CacheUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).CacheUpdate(ctx, req.(*CacheObj))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_CacheDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheObj)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).CacheDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CacheService/CacheDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).CacheDelete(ctx, req.(*CacheObj))
	}
	return interceptor(ctx, in, info, handler)
}

var _CacheService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CacheService",
	HandlerType: (*CacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeCache",
			Handler:    _CacheService_MakeCache_Handler,
		},
		{
			MethodName: "ListCache",
			Handler:    _CacheService_ListCache_Handler,
		},
		{
			MethodName: "DelCache",
			Handler:    _CacheService_DelCache_Handler,
		},
		{
			MethodName: "CacheAdd",
			Handler:    _CacheService_CacheAdd_Handler,
		},
		{
			MethodName: "CacheGet",
			Handler:    _CacheService_CacheGet_Handler,
		},
		{
			MethodName: "CacheSet",
			Handler:    _CacheService_CacheSet_Handler,
		},
		{
			MethodName: "CacheUpdate",
			Handler:    _CacheService_CacheUpdate_Handler,
		},
		{
			MethodName: "CacheDelete",
			Handler:    _CacheService_CacheDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cache.proto",
}

func init() { proto1.RegisterFile("cache.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x51, 0xc1, 0xae, 0x93, 0x50,
	0x10, 0x2d, 0x52, 0xda, 0x32, 0xd4, 0x58, 0x6f, 0x58, 0x20, 0x1b, 0xc9, 0x8d, 0x8b, 0xc6, 0x44,
	0x6a, 0xab, 0x7b, 0xd3, 0x58, 0xe3, 0x42, 0x4d, 0x13, 0x1a, 0xdd, 0x5f, 0xca, 0x58, 0x69, 0x29,
	0x10, 0xa0, 0x4d, 0xf8, 0x03, 0x3f, 0xc4, 0x0f, 0x35, 0x77, 0x2e, 0xbc, 0x57, 0xde, 0xeb, 0xe2,
	0x75, 0xc5, 0x9d, 0x99, 0x73, 0xce, 0x9c, 0x39, 0x80, 0xb5, 0x15, 0xdb, 0x3f, 0xe8, 0xe7, 0x45,
	0x56, 0x65, 0xcc, 0xa0, 0x8f, 0xfb, 0x6a, 0x97, 0x65, 0xbb, 0x04, 0x67, 0x54, 0x85, 0xa7, 0xdf,
	0x33, 0x91, 0xd6, 0x0a, 0xc1, 0x37, 0x60, 0x7c, 0x96, 0x04, 0xc6, 0xa0, 0x9f, 0x8a, 0x23, 0x3a,
	0x9a, 0xa7, 0x4d, 0xcd, 0x80, 0xde, 0xcc, 0x85, 0x51, 0x74, 0x2a, 0x44, 0x15, 0x67, 0xa9, 0xf3,
	0xcc, 0xd3, 0xa6, 0x7a, 0x70, 0x57, 0xcb, 0x59, 0x9c, 0x56, 0x58, 0x9c, 0x45, 0xe2, 0xe8, 0x6a,
	0xd6, 0xd6, 0xfc, 0x35, 0x98, 0x24, 0xfa, 0x0d, 0xeb, 0x52, 0x0a, 0x1f, 0xb0, 0x2e, 0x1d, 0xcd,
	0xd3, 0xa5, 0xb0, 0x7c, 0xf3, 0x4f, 0xf0, 0x9c, 0x00, 0x01, 0x96, 0x79, 0x96, 0x96, 0xc8, 0x1c,
	0x18, 0x1e, 0xb1, 0x2c, 0xc5, 0xae, 0x35, 0xd0, 0x96, 0xcc, 0x06, 0x03, 0x8b, 0x22, 0x2b, 0xc8,
	0x80, 0x19, 0xa8, 0x82, 0xff, 0xd5, 0x60, 0x44, 0x0a, 0xeb, 0x70, 0xcf, 0x38, 0x18, 0x74, 0x34,
	0x51, 0xad, 0xc5, 0x58, 0x9d, 0xe6, 0xab, 0x0d, 0x6a, 0xc4, 0x26, 0xa0, 0x1f, 0xb0, 0x6e, 0x44,
	0xe4, 0x93, 0xbd, 0x05, 0xe3, 0x2c, 0x92, 0x13, 0x92, 0x7b, 0x6b, 0x61, 0xfb, 0x2a, 0x24, 0xbf,
	0x0d, 0xc9, 0x5f, 0xa6, 0x75, 0xa0, 0x20, 0x9d, 0x20, 0xfa, 0x9e, 0x36, 0x35, 0xee, 0x83, 0xe0,
	0x1c, 0x80, 0x36, 0xfd, 0x22, 0xa4, 0xdd, 0xaa, 0xaa, 0x33, 0x54, 0xc1, 0x87, 0x60, 0x7c, 0x39,
	0xe6, 0x55, 0xcd, 0xe7, 0x4d, 0x32, 0xdf, 0xe3, 0xb2, 0x62, 0x6f, 0x60, 0x40, 0xe6, 0x54, 0x36,
	0x0f, 0x8d, 0x37, 0xb3, 0xc5, 0x3f, 0x1d, 0xc6, 0xd4, 0xd9, 0x60, 0x71, 0x8e, 0xb7, 0xc8, 0xe6,
	0x60, 0xfe, 0x10, 0x07, 0x54, 0xbf, 0xad, 0xc3, 0x71, 0xed, 0x8e, 0x42, 0x13, 0x2e, 0xef, 0xb1,
	0x77, 0x60, 0xca, 0x8d, 0x5d, 0x0a, 0x39, 0x72, 0x27, 0x97, 0x14, 0x09, 0xe2, 0x3d, 0xf6, 0x1e,
	0x46, 0x2b, 0x4c, 0x6e, 0x59, 0x30, 0x6f, 0x7e, 0xc7, 0x32, 0x8a, 0xd8, 0x8b, 0x4b, 0xcc, 0x3a,
	0xdc, 0x5f, 0x27, 0x31, 0xbf, 0xa1, 0x7c, 0xc5, 0xea, 0x31, 0xe5, 0xe5, 0x65, 0x43, 0x25, 0xdb,
	0xae, 0xd8, 0x5c, 0xc3, 0x5f, 0x5f, 0xf1, 0x11, 0x2c, 0x6a, 0xfc, 0xcc, 0x23, 0x51, 0xe1, 0xad,
	0xac, 0x15, 0x26, 0xf8, 0x64, 0x56, 0x38, 0xa0, 0xe6, 0x87, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xdf, 0x89, 0x02, 0x24, 0x80, 0x03, 0x00, 0x00,
}
